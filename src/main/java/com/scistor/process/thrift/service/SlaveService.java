/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.scistor.process.thrift.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-11-06")
public class SlaveService {

  public interface Iface {

    public String addSubTask(List<Map<String,String>> elements, String taskId, int slaveNo) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void addSubTask(List<Map<String,String>> elements, String taskId, int slaveNo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public String addSubTask(List<Map<String,String>> elements, String taskId, int slaveNo) throws org.apache.thrift.TException
    {
      send_addSubTask(elements, taskId, slaveNo);
      return recv_addSubTask();
    }

    public void send_addSubTask(List<Map<String,String>> elements, String taskId, int slaveNo) throws org.apache.thrift.TException
    {
      addSubTask_args args = new addSubTask_args();
      args.setElements(elements);
      args.setTaskId(taskId);
      args.setSlaveNo(slaveNo);
      sendBase("addSubTask", args);
    }

    public String recv_addSubTask() throws org.apache.thrift.TException
    {
      addSubTask_result result = new addSubTask_result();
      receiveBase(result, "addSubTask");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addSubTask failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void addSubTask(List<Map<String,String>> elements, String taskId, int slaveNo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addSubTask_call method_call = new addSubTask_call(elements, taskId, slaveNo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addSubTask_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<Map<String,String>> elements;
      private String taskId;
      private int slaveNo;
      public addSubTask_call(List<Map<String,String>> elements, String taskId, int slaveNo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.elements = elements;
        this.taskId = taskId;
        this.slaveNo = slaveNo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addSubTask", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addSubTask_args args = new addSubTask_args();
        args.setElements(elements);
        args.setTaskId(taskId);
        args.setSlaveNo(slaveNo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addSubTask();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("addSubTask", new addSubTask());
      return processMap;
    }

    public static class addSubTask<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addSubTask_args> {
      public addSubTask() {
        super("addSubTask");
      }

      public addSubTask_args getEmptyArgsInstance() {
        return new addSubTask_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addSubTask_result getResult(I iface, addSubTask_args args) throws org.apache.thrift.TException {
        addSubTask_result result = new addSubTask_result();
        result.success = iface.addSubTask(args.elements, args.taskId, args.slaveNo);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("addSubTask", new addSubTask());
      return processMap;
    }

    public static class addSubTask<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addSubTask_args, String> {
      public addSubTask() {
        super("addSubTask");
      }

      public addSubTask_args getEmptyArgsInstance() {
        return new addSubTask_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            addSubTask_result result = new addSubTask_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addSubTask_result result = new addSubTask_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addSubTask_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.addSubTask(args.elements, args.taskId, args.slaveNo,resultHandler);
      }
    }

  }

  public static class addSubTask_args implements org.apache.thrift.TBase<addSubTask_args, addSubTask_args._Fields>, java.io.Serializable, Cloneable, Comparable<addSubTask_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addSubTask_args");

    private static final org.apache.thrift.protocol.TField ELEMENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("elements", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField TASK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("taskId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField SLAVE_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("slaveNo", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addSubTask_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addSubTask_argsTupleSchemeFactory());
    }

    public List<Map<String,String>> elements; // required
    public String taskId; // required
    public int slaveNo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ELEMENTS((short)1, "elements"),
      TASK_ID((short)2, "taskId"),
      SLAVE_NO((short)3, "slaveNo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ELEMENTS
            return ELEMENTS;
          case 2: // TASK_ID
            return TASK_ID;
          case 3: // SLAVE_NO
            return SLAVE_NO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SLAVENO_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ELEMENTS, new org.apache.thrift.meta_data.FieldMetaData("elements", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
      tmpMap.put(_Fields.TASK_ID, new org.apache.thrift.meta_data.FieldMetaData("taskId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SLAVE_NO, new org.apache.thrift.meta_data.FieldMetaData("slaveNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addSubTask_args.class, metaDataMap);
    }

    public addSubTask_args() {
    }

    public addSubTask_args(
      List<Map<String,String>> elements,
      String taskId,
      int slaveNo)
    {
      this();
      this.elements = elements;
      this.taskId = taskId;
      this.slaveNo = slaveNo;
      setSlaveNoIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addSubTask_args(addSubTask_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetElements()) {
        List<Map<String,String>> __this__elements = new ArrayList<Map<String,String>>(other.elements.size());
        for (Map<String,String> other_element : other.elements) {
          Map<String,String> __this__elements_copy = new HashMap<String,String>(other_element);
          __this__elements.add(__this__elements_copy);
        }
        this.elements = __this__elements;
      }
      if (other.isSetTaskId()) {
        this.taskId = other.taskId;
      }
      this.slaveNo = other.slaveNo;
    }

    public addSubTask_args deepCopy() {
      return new addSubTask_args(this);
    }

    @Override
    public void clear() {
      this.elements = null;
      this.taskId = null;
      setSlaveNoIsSet(false);
      this.slaveNo = 0;
    }

    public int getElementsSize() {
      return (this.elements == null) ? 0 : this.elements.size();
    }

    public java.util.Iterator<Map<String,String>> getElementsIterator() {
      return (this.elements == null) ? null : this.elements.iterator();
    }

    public void addToElements(Map<String,String> elem) {
      if (this.elements == null) {
        this.elements = new ArrayList<Map<String,String>>();
      }
      this.elements.add(elem);
    }

    public List<Map<String,String>> getElements() {
      return this.elements;
    }

    public addSubTask_args setElements(List<Map<String,String>> elements) {
      this.elements = elements;
      return this;
    }

    public void unsetElements() {
      this.elements = null;
    }

    /** Returns true if field elements is set (has been assigned a value) and false otherwise */
    public boolean isSetElements() {
      return this.elements != null;
    }

    public void setElementsIsSet(boolean value) {
      if (!value) {
        this.elements = null;
      }
    }

    public String getTaskId() {
      return this.taskId;
    }

    public addSubTask_args setTaskId(String taskId) {
      this.taskId = taskId;
      return this;
    }

    public void unsetTaskId() {
      this.taskId = null;
    }

    /** Returns true if field taskId is set (has been assigned a value) and false otherwise */
    public boolean isSetTaskId() {
      return this.taskId != null;
    }

    public void setTaskIdIsSet(boolean value) {
      if (!value) {
        this.taskId = null;
      }
    }

    public int getSlaveNo() {
      return this.slaveNo;
    }

    public addSubTask_args setSlaveNo(int slaveNo) {
      this.slaveNo = slaveNo;
      setSlaveNoIsSet(true);
      return this;
    }

    public void unsetSlaveNo() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SLAVENO_ISSET_ID);
    }

    /** Returns true if field slaveNo is set (has been assigned a value) and false otherwise */
    public boolean isSetSlaveNo() {
      return EncodingUtils.testBit(__isset_bitfield, __SLAVENO_ISSET_ID);
    }

    public void setSlaveNoIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SLAVENO_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ELEMENTS:
        if (value == null) {
          unsetElements();
        } else {
          setElements((List<Map<String,String>>)value);
        }
        break;

      case TASK_ID:
        if (value == null) {
          unsetTaskId();
        } else {
          setTaskId((String)value);
        }
        break;

      case SLAVE_NO:
        if (value == null) {
          unsetSlaveNo();
        } else {
          setSlaveNo((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ELEMENTS:
        return getElements();

      case TASK_ID:
        return getTaskId();

      case SLAVE_NO:
        return getSlaveNo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ELEMENTS:
        return isSetElements();
      case TASK_ID:
        return isSetTaskId();
      case SLAVE_NO:
        return isSetSlaveNo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addSubTask_args)
        return this.equals((addSubTask_args)that);
      return false;
    }

    public boolean equals(addSubTask_args that) {
      if (that == null)
        return false;

      boolean this_present_elements = true && this.isSetElements();
      boolean that_present_elements = true && that.isSetElements();
      if (this_present_elements || that_present_elements) {
        if (!(this_present_elements && that_present_elements))
          return false;
        if (!this.elements.equals(that.elements))
          return false;
      }

      boolean this_present_taskId = true && this.isSetTaskId();
      boolean that_present_taskId = true && that.isSetTaskId();
      if (this_present_taskId || that_present_taskId) {
        if (!(this_present_taskId && that_present_taskId))
          return false;
        if (!this.taskId.equals(that.taskId))
          return false;
      }

      boolean this_present_slaveNo = true;
      boolean that_present_slaveNo = true;
      if (this_present_slaveNo || that_present_slaveNo) {
        if (!(this_present_slaveNo && that_present_slaveNo))
          return false;
        if (this.slaveNo != that.slaveNo)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_elements = true && (isSetElements());
      list.add(present_elements);
      if (present_elements)
        list.add(elements);

      boolean present_taskId = true && (isSetTaskId());
      list.add(present_taskId);
      if (present_taskId)
        list.add(taskId);

      boolean present_slaveNo = true;
      list.add(present_slaveNo);
      if (present_slaveNo)
        list.add(slaveNo);

      return list.hashCode();
    }

    @Override
    public int compareTo(addSubTask_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetElements()).compareTo(other.isSetElements());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetElements()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.elements, other.elements);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTaskId()).compareTo(other.isSetTaskId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTaskId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskId, other.taskId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSlaveNo()).compareTo(other.isSetSlaveNo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSlaveNo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.slaveNo, other.slaveNo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addSubTask_args(");
      boolean first = true;

      sb.append("elements:");
      if (this.elements == null) {
        sb.append("null");
      } else {
        sb.append(this.elements);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("taskId:");
      if (this.taskId == null) {
        sb.append("null");
      } else {
        sb.append(this.taskId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("slaveNo:");
      sb.append(this.slaveNo);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addSubTask_argsStandardSchemeFactory implements SchemeFactory {
      public addSubTask_argsStandardScheme getScheme() {
        return new addSubTask_argsStandardScheme();
      }
    }

    private static class addSubTask_argsStandardScheme extends StandardScheme<addSubTask_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addSubTask_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ELEMENTS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.elements = new ArrayList<Map<String,String>>(_list0.size);
                  Map<String,String> _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    {
                      org.apache.thrift.protocol.TMap _map3 = iprot.readMapBegin();
                      _elem1 = new HashMap<String,String>(2*_map3.size);
                      String _key4;
                      String _val5;
                      for (int _i6 = 0; _i6 < _map3.size; ++_i6)
                      {
                        _key4 = iprot.readString();
                        _val5 = iprot.readString();
                        _elem1.put(_key4, _val5);
                      }
                      iprot.readMapEnd();
                    }
                    struct.elements.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setElementsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TASK_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.taskId = iprot.readString();
                struct.setTaskIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SLAVE_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.slaveNo = iprot.readI32();
                struct.setSlaveNoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addSubTask_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.elements != null) {
          oprot.writeFieldBegin(ELEMENTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, struct.elements.size()));
            for (Map<String,String> _iter7 : struct.elements)
            {
              {
                oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, _iter7.size()));
                for (Map.Entry<String, String> _iter8 : _iter7.entrySet())
                {
                  oprot.writeString(_iter8.getKey());
                  oprot.writeString(_iter8.getValue());
                }
                oprot.writeMapEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.taskId != null) {
          oprot.writeFieldBegin(TASK_ID_FIELD_DESC);
          oprot.writeString(struct.taskId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(SLAVE_NO_FIELD_DESC);
        oprot.writeI32(struct.slaveNo);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addSubTask_argsTupleSchemeFactory implements SchemeFactory {
      public addSubTask_argsTupleScheme getScheme() {
        return new addSubTask_argsTupleScheme();
      }
    }

    private static class addSubTask_argsTupleScheme extends TupleScheme<addSubTask_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addSubTask_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetElements()) {
          optionals.set(0);
        }
        if (struct.isSetTaskId()) {
          optionals.set(1);
        }
        if (struct.isSetSlaveNo()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetElements()) {
          {
            oprot.writeI32(struct.elements.size());
            for (Map<String,String> _iter9 : struct.elements)
            {
              {
                oprot.writeI32(_iter9.size());
                for (Map.Entry<String, String> _iter10 : _iter9.entrySet())
                {
                  oprot.writeString(_iter10.getKey());
                  oprot.writeString(_iter10.getValue());
                }
              }
            }
          }
        }
        if (struct.isSetTaskId()) {
          oprot.writeString(struct.taskId);
        }
        if (struct.isSetSlaveNo()) {
          oprot.writeI32(struct.slaveNo);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addSubTask_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list11 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, iprot.readI32());
            struct.elements = new ArrayList<Map<String,String>>(_list11.size);
            Map<String,String> _elem12;
            for (int _i13 = 0; _i13 < _list11.size; ++_i13)
            {
              {
                org.apache.thrift.protocol.TMap _map14 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                _elem12 = new HashMap<String,String>(2*_map14.size);
                String _key15;
                String _val16;
                for (int _i17 = 0; _i17 < _map14.size; ++_i17)
                {
                  _key15 = iprot.readString();
                  _val16 = iprot.readString();
                  _elem12.put(_key15, _val16);
                }
              }
              struct.elements.add(_elem12);
            }
          }
          struct.setElementsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.taskId = iprot.readString();
          struct.setTaskIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.slaveNo = iprot.readI32();
          struct.setSlaveNoIsSet(true);
        }
      }
    }

  }

  public static class addSubTask_result implements org.apache.thrift.TBase<addSubTask_result, addSubTask_result._Fields>, java.io.Serializable, Cloneable, Comparable<addSubTask_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addSubTask_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addSubTask_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addSubTask_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addSubTask_result.class, metaDataMap);
    }

    public addSubTask_result() {
    }

    public addSubTask_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addSubTask_result(addSubTask_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public addSubTask_result deepCopy() {
      return new addSubTask_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public addSubTask_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addSubTask_result)
        return this.equals((addSubTask_result)that);
      return false;
    }

    public boolean equals(addSubTask_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addSubTask_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addSubTask_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addSubTask_resultStandardSchemeFactory implements SchemeFactory {
      public addSubTask_resultStandardScheme getScheme() {
        return new addSubTask_resultStandardScheme();
      }
    }

    private static class addSubTask_resultStandardScheme extends StandardScheme<addSubTask_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addSubTask_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addSubTask_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addSubTask_resultTupleSchemeFactory implements SchemeFactory {
      public addSubTask_resultTupleScheme getScheme() {
        return new addSubTask_resultTupleScheme();
      }
    }

    private static class addSubTask_resultTupleScheme extends TupleScheme<addSubTask_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addSubTask_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addSubTask_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
